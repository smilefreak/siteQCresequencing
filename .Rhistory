f = merge(a,b,by="VAR",suffixes=c(".p.controls",'.p.cases'))
f = merge(qc_m,f,by="VAR")
f = f[ f$DPM > 30, ]
f = f[ f$CNTA >= 2  | f$CNTU >= 2,]
ps = -log10(f$P)
up_down = rep("ANORMALCOPY",nrow(f))
up_down[(f$DPM.cases-f$DPM.controls) > 5 ] = "UP"
up_down[(f$DPM.cases - f$DPM.controls) < -5 ] = "DOWN"
up_down = factor(up_down)
up_down2 = rep("ANORMALCOPY",nrow(f))
up_down2[(f$DPM.p.cases-f$DPM.p.controls) > 5  ] = "UP"
up_down2[(f$DPM.p.cases - f$DPM.p.controls) < -5 ] = "DOWN"
up_down2 = factor(up_down2)
plot(ps ~ up_down2)
plot(ps ~ up_down)
summary(lm(ps~up_down2))
summary(lm(ps~up_down))
summary(lm(ps~up_down2))
summary(lm(ps~up_down))
ah = f$DPM.casfes - f$DPM.controls
m3 = lm(ps ~ abs(f$DPM.cases -f$DPM.controls) + f$GQM.controls +  f$GQM.cases+f$GQ10 + f$GQ50 )
summary(m3)
ah2 = f$DPM.p.cases - f$DPM.p.controls
m4 = lm(ps ~ abs(f$DPM.p.cases-f$DPM.p.controls) +  f$GQM.cases+f$GQ10 + f$GQ50 )
summary(m4)
summary(m3)
ah2 = f$DPM.p.cases - f$DPM.p.controls
m4 = lm(ps ~ abs(f$DPM.p.cases-f$DPM.p.controls) +  f$GQM.cases+f$GQ10 + f$GQ50 )
summary(m4)
plot(ps ~ up_down2)
plot(ps ~ up_down)
summary(lm(ps~up_down2))
summary(lm(ps~up_down))
which(max(ps)==ps)
f[5657,]
f
f$DPM.cases[121,]
f$DPM.cases[1212,]
which(max(ps)==ps)
f$DPM.cases[5657]
f$DPM.controls[5657]
f$DPM.p.controls[5657]
f$DPM.p.controls[5657]
f$DPM.p.cases[5657]
f[5657,]
f[5657,]$VAR
f[5657,]$VAR
f[5657,]$VAR
f$DPM.p.controls[5657]
f$DPM.controls[5657]
f$DPM.cases[5657]
f[5657,]
dp
read.table(paste0(dir,"genotype_depth.txt"),F)
b = read.table(paste0(dir,"genotype_depth.txt"),F)
b = read.table(paste0(dir,"genotype_depth.txt"),header=T)
b = read.table(paste0(dir,"genotype_depth.txt"),header=T)
grep(b$MARKER,"chr4:89052323")
grep("chr4:89052323",b$MARKER)
grep("chr4:89052323",b$MARKER)
b[5592,]
plot(b[5592,])
plot(as.numeric(b[5592,]))
cols=names(b)
cols
cases = which(cols%in% ur[ur[,2]==2,1])
controls = which(cols%in%ur[ur[,2] ==1,1])
cases
controls
cases = cases - 2
controls = controls
controls = controls  - 2
f = (as.numeric(b[5592,]))
f[-c(1,2)]
f[-c(1)]
f[-c(1,2)]
f = (as.numeric(b[5592,]))
length(f)
length(f)
b$AT0208
b$AT0208
f[-c(1,2)]
b$AT0208
b$AT0208
f[-c(1)]
k = f[-c(1)]
k
cases
controls
cases = cases + 1
controls = controls + 1
k
plot(k)
plot(k[cases])
plot(k[controls],col='red')
plot(k[cases])
plot(k[controls],col='red')
plot(k[controls],col='red')
points(k[cases])
mean(k[cases])
mean(k[controls])
t.test(k[controls],k[cases])
t.test(k[controls],k[cases])
t_test = t.test(k[controls],k[cases])
t_test
t_test
t_test = t.test(k[controls],k[cases])
t_test
t_test
k
f = (as.numeric(b[5592,]))
which(max(ps)==ps)
f[5657,]
f[5657,]
colnames(a) = ggdp_names
colnames(b) = ggdp_names
f = merge(a,b,by="VAR",suffixes=c(".p.controls",'.p.cases'))
f = merge(qc_m,f,by="VAR")
f = f[ f$DPM > 30, ]
colnames(a) = ggdp_names
colnames(b) = ggdp_names
f = merge(a,b,by="VAR",suffixes=c(".p.controls",'.p.cases'))
f = merge(qc_m,f,by="VAR")
f = merge(a,b,by="VAR",suffixes=c(".p.controls",'.p.cases'))
a = read.table(paste0(dir,"perm_controls.stats"))
b = read.table(paste0(dir,"perm_cases.stats"))
colnames(a) = ggdp_names
colnames(b) = ggdp_names
f = merge(a,b,by="VAR",suffixes=c(".p.controls",'.p.cases'))
f = merge(qc_m,f,by="VAR")
f = f[ f$DPM > 30, ]
f = f[ f$CNTA >= 2  | f$CNTU >= 2,]
ps = -log10(f$P)
which(max(ps)==ps)
ps[5657,]
blah = f[5657,]
blah$PROP_DEVIANT_HOM_AB_90.controls
blah$PROP_DEVIANT_HET_AB_20_80
blah$PROP_DEVIANT_HET_AB_40_60.cases
blah$PROP_DEVIANT_HET_AB_40_60.controls
blah$PROP_DEVIANT_HET_AB_30_70
blah$PROP_DEVIANT_HET_AB_40_60
blah$PROP_DEVIANT_HET_AB_40_60
blah$SAMPLE_HET_AB
blah$SAMPLE_REF_AB.cases
blah$DPM.p.cases
blah$DPM.cases
blah$SAMPLE_HOM_AB
blah$SAMPLE_HET_AB
blah$SAMPLE_REF_AB
plot(k[controls]~k[cases])
plot(k[controls])
plot(k[cases])
plot(k[controls])
which(k[controls])
which(k==max(k){}
which(k==max(k))
names(k)
names(b)
b = read.table(paste0(dir,"genotype_depth.txt"),header=T)
names(b)
names(b)[285]
ps[5657,]
ps[5657]
f[5658,]
f[5657,]
f[5657,]$VAR
pheno  = read.table("~/phenotypes.txt")
pheno  = read.delim("~/phenotypes.txt",sep='\t')
rd_exon = read.delim("~/test_rd")
rd_exon = read.delim("~/test_rd_exon.txt")
rd_exon
nrow(rd_exon)
rd_exon = read.delim("~/test_rd_exon.txt",header=F)
rd_exon
pheno
merge(pheno, rd_exon,by=1)
newbie = merge(pheno, rd_exon,by=1)
newbie
nrow(blah)
nrow(newbie)
plot(newbie$V2 ~ newbie$SURICACID)
which(newbie$V2 %in% names(b))
which(newbie$V1 %in% names(b))
which(newbie[,1] %in% names(b))
newbie[which(newbie[,1] %in% names(b)),]
ohre = newbie[which(newbie[,1] %in% names(b)),]
ohre
plot(ohre$V2 ~ ohre$SURICACID)
cor(ohre$V2 ~ ohre$SURICACID)
cor(ohre$V2, ohre$SURICACID)
cor(ohre$V2, ohre$SURICACID)
plot(ohre$V2 ~ ohre$SURICACID)
f[5717,]
f[5717,]$VAR
ps
f = merge(qc_m,f,by="VAR")
f = f[ f$DPM > 30, ]
f = f[ f$CNTA >= 2  | f$CNTU >= 2,]
f[5717,]
f[5717,]$VAR
ohre = newbie[which(newbie[,1] %in% names(b)),]
ohre
hroe
ohre
plot(ohre$V2 ~ ohre$GOUSUM)
plot(ohre$V2 ~ ohre$GOUTSUM)
rd_exon = read.delim("~/test_rd_exon.txt",header=F)
merge(pheno, rd_exon,by=1)
newbie = merge(pheno, rd_exon,by=1)
plot(newbie$V2 ~ newbie$SURICACID)
which(newbie$V2 %in% names(b))
ohre = newbie[which(newbie[,1] %in% names(b)),]
plot(ohre$V2 ~ ohre$SURICACID)
cor(ohre$V2 ~ ohre$SURICACID)
cor(ohre$V2, ohre$SURICACID)
cor(ohre$V2, ohre$SURICACID)
plot(ohre$V2 ~ ohre$SURICACID)
plot(ohre$V2 ~ ohre$GOUTSUM)
plot(ohre$V2 ~ factor(ohre$GOUTSUM))
plot(ohre$V2 ~ factor(ohre$GOUTSUM))
plot(ohre$V2 ~ ohre$GOUTSUM)
plot(ohre$V2 ~ factor(ohre$GOUTSUM))
ohre$GOUTSUM
ohre$V2
ohre$V2
ohre$GOUTSUM
ohre$V2
plot(ohre$V2)
plot(ohre$V2)
plot(ohre$V2 ~ factor(ohre$GOUTSUM))
cor(ohre$V2,ohre$GOUTSUM)
cor(ohre$V2,ohre$SURICACID)
t.test(ohre$V2,ohre$SURICACID)
cor(ohre$V2,ohre$SURICACID)
t.test(ohre$V2,ohre$SURICACID)
plot(ohre$V2 ~ factor(ohre$GOUTSUM))
plot(ohre$V2 ~ factor(ohre$GOUTSUM))
plot(ohre$V2 ~ factor(ohre$SURICACID)
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ls()
shiny::runApp()
qc_m = read.table("merged_qc_new.txt")
getwd()
qc_m
qc_m = read.table("merged_qc_new.txt")
qc_m$ANNOT
qc_m = qc_m %>% mutate(HET =  ((qc_m$HETA + qc_m$HETU) / (qc_m$OBSA + qc_m$OBSU)) )
qc_m = qc_m %>% mutate(MAF_2 = ((qc_m$MAC.cases +  qc_m$MAC.controls)/ ((qc_m$OBSA + qc_m$OBSU)*2)))
qc_table = qc_m %>%
select(
pvalue = P,
genotype = REF.ALT,
variant = VAR,
MAF_cases = MAF.cases,
MAF_controls = MAF.controls,
HET_cases = HET.cases,
HET_controls = HET.controls,
GQ50_num = GQ50,
GQ10_num = GQ10,
count_cases = CNTA,
count_controls = CNTU,
hwe = HWE,
HET = HET,
MAF = MAF_2,
filter = FILTER.x,
coverage_mean = DPM,
genotype_quality_mean =GQM,
proportion_hetAB_30_70=PROP_DEVIANT_HET_AB_30_70,
proportion_hetAB_20_80=PROP_DEVIANT_HET_AB_20_80,
altAB=SAMPLE_HOM_AB,
refAB=SAMPLE_REF_AB,
# Filter indivdual sites also
annotation = ANNOT,
hwe_cases = HWE.cases,
hwe_controls = HWE.controls,
hetAB_cases = SAMPLE_HET_AB.cases,
hetAB_controls = SAMPLE_HET_AB.controls,
proportion_hetAB_30_70_cases = PROP_DEVIANT_HET_AB_30_70.cases,
proportion_hetAB_30_70_controls =PROP_DEVIANT_HET_AB_30_70.controls,
proportion_hetAB_20_80_controls = PROP_DEVIANT_HET_AB_20_80.controls,
proportion_hetAB_20_80_cases = PROP_DEVIANT_HET_AB_20_80.cases,
genotype_quality_mean_cases = GQM.cases,
genotype_qualtiy_mean_controls= GQM.controls,
coverage_mean_controls = DPM.controls,
coverage_mean_cases = DPM.cases,
refAB_cases = SAMPLE_REF_AB.cases,
refAB_controls = SAMPLE_REF_AB.controls,
altAB_cases = SAMPLE_HOM_AB.cases,
altAB_controls = SAMPLE_HOM_AB.controls
)
qc_table$annotation
coding = ! (qc_table$annotation %in% c("intronic","intergenic"))
coding
sum(coding)
shiny::runApp()
shiny::runApp()
qc_m$FILTER.x
qc_m$FILTER.x
unique(qc_m$FILTER.x)
shiny::runApp()
shiny::runApp()
qc_table = qc_m %>%
select(
pvalue = P,
genotype = REF.ALT,
variant = VAR,
MAF_cases = MAF.cases,
MAF_controls = MAF.controls,
HET_cases = HET.cases,
HET_controls = HET.controls,
GQ50_num = GQ50,
GQ10_num = GQ10,
count_cases = CNTA,
count_controls = CNTU,
hwe = HWE,
HET = HET,
MAF = MAF_2,
filter = FILTER.x,
coverage_mean = DPM,
genotype_quality_mean =GQM,
proportion_hetAB_30_70=PROP_DEVIANT_HET_AB_30_70,
proportion_hetAB_20_80=PROP_DEVIANT_HET_AB_20_80,
altAB=SAMPLE_HOM_AB,
refAB=SAMPLE_REF_AB,
# Filter indivdual sites also
annotation = ANNOT,
hwe_cases = HWE.cases,
hwe_controls = HWE.controls,
hetAB_cases = SAMPLE_HET_AB.cases,
hetAB_controls = SAMPLE_HET_AB.controls,
proportion_hetAB_30_70_cases = PROP_DEVIANT_HET_AB_30_70.cases,
proportion_hetAB_30_70_controls =PROP_DEVIANT_HET_AB_30_70.controls,
proportion_hetAB_20_80_controls = PROP_DEVIANT_HET_AB_20_80.controls,
proportion_hetAB_20_80_cases = PROP_DEVIANT_HET_AB_20_80.cases,
genotype_quality_mean_cases = GQM.cases,
genotype_qualtiy_mean_controls= GQM.controls,
coverage_mean_controls = DPM.controls,
coverage_mean_cases = DPM.cases,
refAB_cases = SAMPLE_REF_AB.cases,
refAB_controls = SAMPLE_REF_AB.controls,
altAB_cases = SAMPLE_HOM_AB.cases,
altAB_controls = SAMPLE_HOM_AB.controls,
filter = FILTER.x
)
qc_table$filter
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
qc_table$proportion_hetAB_20_80_cases
qc_table$proportion_hetAB_20_80_cases
qc_table$proportion_hetAB_20_80_cases
plot(-log10(qc_table$pvalue),qc_table$proportion_hetAB_20_80_cases)
shiny::runApp()
plot(-log10(qc_table$pvalue),qc_table$proportion_hetAB_20_80_cases)
plot(-log10(qc_table$pvalue),qc_table$proportion_hetAB_20_80_controls)
shiny::runApp()
include = rep(T, length(qc_table$pvalue))
include[ qc_table$proportion_hetAB_20_80_cases > 0.1
| qc_table$proportion_hetAB_20_80_controls > 0.1 ] = F
plot(-log10(qc_table$pvalue[include]),qc_table$proportion_hetAB_20_80_controls[include])
plot(-log10(qc_table$pvalue[include]),qc_table$proportion_hetAB_20_80_cases[include])
plot(-log10(qc_table$pvalue[include]),qc_table$proportion_hetAB_20_80_controls[include])
plot(-log10(qc_table$pvalue[include]),qc_table$proportion_hetAB_20_80_cases[include])
plot(-log10(qc_table$pvalue[include]),qc_table$proportion_hetAB_20_80_controls[include])
par(mfrow=c(1,2))
plot(-log10(qc_table$pvalue[include]),qc_table$proportion_hetAB_20_80_controls[include])
plot(-log10(qc_table$pvalue[include]),qc_table$proportion_hetAB_20_80_cases[include])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
qc_table$GQ50_num
qc_table$GQ50_num + qc_table$GQ10_num
qc_table$GQ50_num + qc_table$GQ10_num
qc_table$GQ50_num + qc_table$GQ10_num
sum(qc_table$GQ50_num + qc_table$GQ10_num)
sum(qc_table$GQ50_num)
sum(qc_table$GQ50_num + qc_table$GQ10_num)
shiny::runApp()
qc_m = read.table("merged_qc_new.txt")
qc_m = read.table("merged_qc_new.txt")
qc_m
shiny::runApp()
qc_m = qc_m %>% mutate(HET =  ((qc_m$HETA + qc_m$HETU) / (qc_m$OBSA + qc_m$OBSU)) )
qc_m = qc_m %>% mutate(MAF_2 = ((qc_m$MAC.cases +  qc_m$MAC.controls)/ ((qc_m$OBSA + qc_m$OBSU)*2)))
qc_table = qc_m %>%
select(
pvalue = P,
genotype = REF.ALT,
variant = VAR,
MAF_cases = MAF.cases,
MAF_controls = MAF.controls,
HET_cases = HET.cases,
HET_controls = HET.controls,
GQ50_num = GQ50,
GQ10_num = GQ10,
count_cases = CNTA,
count_controls = CNTU,
hwe = HWE,
HET = HET,
MAF = MAF_2,
filter = FILTER.x,
coverage_mean = DPM,
genotype_quality_mean =GQM,
proportion_hetAB_30_70=PROP_DEVIANT_HET_AB_30_70,
proportion_hetAB_20_80=PROP_DEVIANT_HET_AB_20_80,
altAB=SAMPLE_HOM_AB,
refAB=SAMPLE_REF_AB,
# Filter indivdual sites also
annotation = ANNOT,
hwe_cases = HWE.cases,
hwe_controls = HWE.controls,
hetAB_cases = SAMPLE_HET_AB.cases,
hetAB_controls = SAMPLE_HET_AB.controls,
proportion_hetAB_30_70_cases = PROP_DEVIANT_HET_AB_30_70.cases,
proportion_hetAB_30_70_controls =PROP_DEVIANT_HET_AB_30_70.controls,
proportion_hetAB_20_80_controls = PROP_DEVIANT_HET_AB_20_80.controls,
proportion_hetAB_20_80_cases = PROP_DEVIANT_HET_AB_20_80.cases,
genotype_quality_mean_cases = GQM.cases,
genotype_qualtiy_mean_controls= GQM.controls,
coverage_mean_controls = DPM.controls,
coverage_mean_cases = DPM.cases,
refAB_cases = SAMPLE_REF_AB.cases,
refAB_controls = SAMPLE_REF_AB.controls,
altAB_cases = SAMPLE_HOM_AB.cases,
altAB_controls = SAMPLE_HOM_AB.controls,
filter = FILTER.x
)
qc_table
qc_table$pvalue
qc_table$pvalue
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
qc_m = read.table("merged_qc_new.txt")
qc_m
qc_m
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
qc_m = read.table("merged_qc_new.txt")
nrow(qc_m)
shiny::runApp()
# This is the server logic for a Shiny web application.
qc_m = read.table("merged_qc_new.txt")
install.packages('ggplot2')
library(dplyr)
install.packages('dplyr')
library(ggplot2)
library(xtable)
# You can find out more about building applications with Shiny here:
# This is the user-interface definition of a Shiny web application.
install.packages('xtable')
library(xtable)
## Load databases
fhet <- function(p) { 2*p*(1-p) }
source('~/resequencing/siteqc/server.R', echo=TRUE)
install.packages('shiny')
source('~/resequencing/siteqc/server.R', echo=TRUE)
install.packages('gridextra')
install.packages('gridExtra')
source('~/resequencing/siteqc/server.R', echo=TRUE)
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
# http://shiny.rstudio.com
source('~/resequencing/siteqc/ui.R', echo=TRUE)
shiny::runApp()
shiny::runApp()
qc_m
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
