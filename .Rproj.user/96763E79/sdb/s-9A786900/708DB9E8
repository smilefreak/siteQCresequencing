{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gridExtra)\nget_data_set = function(include){\n  return(qc_table[include,])\n}\nget_new_ggplot = function(data_set){\n  return(ggplot(data=data_set))\n}\nhwe_thresholds = function(x,thresh=0.01) {\n  x=x  %>% mutate( hwe_threshold = ifelse(hwe <= thresh,paste0(\"<=\",thresh),paste0(\">\",thresh)))\n  return(x)\n}\n\nusers=c(\"smilefreak\")\n\nshinyServer(function(input, output, session) {\n  \n  # Table, which contains all QC values , which have been analysed\n  #output$file_input\n  \n  output$qc_table = renderDataTable({\n    qc_table[,input$show_vars, drop=FALSE]\n  }, options = list(orderClasses = TRUE))\n  # Plots for the QC metrics and tables.\n  \n  \n  inclusion_criteria = reactive({\n    include = rep(T, length(qc_table$pvalue))\n    if(input$conditionedPanels == 'QC Plots Urate'){\n      include[ qc_table$count_cases + qc_table$count_controls == 0] = F\n      include[ (qc_table$filter %in%  input$filters) ] = F \n      include[ input$max_prop_ref  < qc_table$refAB_cases | input$max_prop_ref < qc_table$refAB_controls ] = F\n      include[ input$min_prop_alt > qc_table$altAB_cases | input$min_prop_alt > qc_table$altAB_controls] =F \n      include[input$max_prop_alt ] = F \n      include[ qc_table$genotype_quality_mean_cases < input$gqm | qc_table$genotype_qualtiy_mean_controls < input$gqm ] = F\n      include[ qc_table$hetAB_cases < input$low_het_ab_prop | qc_table$hetAB_controls < input$low_het_ab_prop] = F\n      include[ qc_table$hetAB_cases > input$high_het_ab_prop | qc_table$hetAB_controls > input$high_het_ab_prop ]= F\n      include[ qc_table$proportion_hetAB_20_80_cases > input$prop_20_80 \n               | qc_table$proportion_hetAB_20_80_controls > input$prop_20_80 ] = F\n      include[ qc_table$proportion_hetAB_30_70_controls > input$prop_30_70\n               | qc_table$proportion_hetAB_30_70_cases > input$prop_30_70] = F\n      include[ abs(qc_table$genotype_quality_mean_cases - qc_table$genotype_qualtiy_mean_controls) >= input$mean_difference ] =F\n      \n      proportion_gq_10 = qc_table$GQ10_nums/(qc_table$GQ50_num + qc_table$GQ10_num)\n      include [input$number_samples_gq_10 > qc_table$GQ10_nums ] = F\n      #print(include) \n    }else if(input$conditionedPanels == 'All Site QC'){  \n      include[ input$max_prop_ref  < qc_table$refAB_cases | input$max_prop_ref < qc_table$refAB_controls ] = F\n      include[ input$min_prop_alt > qc_table$altAB_cases | input$min_prop_alt > qc_table$altAB_controls] = F \n      include[input$max_prop_alt ] = F \n      include[ qc_table$genotype_quality_mean_cases < input$gqm | qc_table$genotype_qualtiy_mean_controls < input$gqm ] = F\n      include[ qc_table$hetAB_cases < input$low_het_ab_prop | qc_table$hetAB_controls < input$low_het_ab_prop] = F\n      include[ qc_table$hetAB_cases > input$high_het_ab_prop | qc_table$hetAB_controls > input$high_het_ab_prop ]= F\n      include[ qc_table$proportion_hetAB_20_80_cases > input$prop_20_80 \n               | qc_table$proportion_hetAB_20_80_controls > input$prop_20_80 ] = F\n      include[ qc_table$proportion_hetAB_30_70_controls > input$prop_30_70\n               | qc_table$proportion_hetAB_30_70_cases > input$prop_30_70] = F  \n    }\n    return(include)\n  })\n  output$variant_summary = renderTable({\n    include = inclusion_criteria()\n    no_variants = sum(include)\n    excluded_variants = sum(!include)\n    return(data.frame(included_variants=no_variants,exc_variants=excluded_variants))\n  })\n  output$ts_tv_table = renderTable({\n    inc = inclusion_criteria()\n    tstv= get_tstv_total()\n    tstv_inc = get_tstv_included(inc)\n    tstv_exc = get_tstv_excluded(inc)\n    coding = ! (qc_table$annotation %in% c(\"intronic\",\"intergenic\"))\n    tstv_inc_coding = get_tstv_included(inc & coding)\n    tstv_exc_coding = get_tstv_excluded(inc & !coding)\n    df_ts = data.frame(total_tstv=tstv,tstv_inc=tstv_inc,tstv_exc=tstv_exc,coding_inc=tstv_inc_coding, coding_exc=tstv_exc_coding)\n    return(df_ts)\n  })\n  output$variant_summary2 = renderTable({\n    include = inclusion_criteria()\n    no_variants = sum(include)\n    excluded_variants = sum(!include)\n    return(data.frame(included_variants=no_variants,exc_variants=excluded_variants))\n  })\n  output$ts_tv_table2 = renderTable({\n    inc = inclusion_criteria()\n    tstv= get_tstv_total()\n    tstv_inc = get_tstv_included(inc)\n    tstv_exc = get_tstv_excluded(inc)\n    df_ts = data.frame(total_tstv=tstv,tstv_inc=tstv_inc,tstv_exc=tstv_exc)\n    return(df_ts)\n  })\n  output$partitioning =  \n    output$singleton_table = renderTable({\n      inc = inclusion_criteria()\n      case_singletons = length(qc_table[ qc_table$count_cases == 1 & qc_table$count_controls==0 & inc,1])\n      controls_singletons = length(qc_table[ qc_table$count_cases == 0 & qc_table$count_controls == 1 & inc,1])\n      df_s = data.frame(case_singletons=case_singletons,control_singleton=controls_singletons)\n      return(df_s)  \n    })\n  output$hwe_table = renderTable({\n    inc = inclusion_criteria()\n    case_hwe = sum((qc_table$hwe_cases[inc]> input$hwe_thresh)/sum(inc))\n    controls_hwe = sum((qc_table$hwe_controls[inc]> input$hwe_thresh)/sum(inc))\n    hwe = sum((qc_table$hwe[inc]>input$hwe_thresh)/sum(inc))\n    df_h = data.frame(hwe=hwe,hwe_cases=case_hwe,hwe_controls=controls_hwe)\n    return(df_h)\n  })\n  output$hwe_cases_plot=renderPlot({\n    p_df = get_data_set(inclusion_criteria())\n    p_df = hwe_thresholds(p_df,thresh=input$hwe_thresh) \n    #  print(p_df$hwe_threshold)\n    p_this = get_new_ggplot(p_df)\n    p_this = p_this + ggtitle(\"Cases\")\n    p_this = p_this + geom_point(aes(y=HET_cases, x=MAF_cases,colour=hwe_threshold))\n    p_this = p_this + labs(x=\"Minor Allele Frequency\",y=\"Heterozygosity\") + \n      scale_x_continuous(limits=c(0,0.5)) + scale_y_continuous(limit=c(0,1))\n    plot(p_this)\n  })\n  output$hwe_controls_plot=renderPlot({\n    p_df = get_data_set(inclusion_criteria())\n    p_df = hwe_thresholds(p_df,thresh=input$hwe_thresh) \n    #   print(p_df$hwe_threshold)\n    p_this = get_new_ggplot(p_df)\n    p_this = p_this + ggtitle(\"Controls\")\n    p_this = p_this + geom_point(aes(y=HET_controls,x=MAF_controls, colour =hwe_threshold))\n    p_this = p_this + labs(x=\"Minor Allele Frequency\",y=\"Heterozygosity\") + \n      scale_x_continuous(limits=c(0,0.5)) + scale_y_continuous(limit=c(0,1))\n    plot(p_this)\n  })\n  output$allelic_balance_controls=renderPlot({\n    p_df = get_data_set(inclusion_criteria())\n   # p_this = get_new_ggplot(p_df)\n    p_one = ggplot() + ggtitle(\"Singletons\") + xlim(0,1)\n    sing = p_df[p_df$count_cases == 0 & p_df$count_controls == 1,]\n    p_one = p_one + geom_histogram(data=sing,aes(x=hetAB_controls),binwidth=0.01) +  xlab(\"Average read heterozygosity\")  + ylab(\"Number of sites\")\n    p_second = ggplot() + ggtitle(\"Doubletons\")   + xlim(0,1) \n    double = p_df[p_df$count_cases == 0 & p_df$count_controls == 2,]\n    p_second= p_second + geom_histogram(data=double,aes(hetAB_controls),binwidth=0.01) + xlab(\"Average read heterozygosity\")  + ylab(\"Number of sites\")\n    grid.arrange(p_one,p_second,ncol=2,main=\"Controls Heterozygosity\")\n    #  plot(c(0,7), c(0,7), col=\"red\", lwd=3, type=\"l\", xlab=\"Expected (-logP)\", ylab=\"Observed (-logP)\", xlim=c(0,7), ylim=c(0,7), las=1, xaxs=\"i\", yaxs=\"i\", bty=\"l\")\n  })\n  output$allelic_balance_cases= renderPlot({\n    p_df = get_data_set(inclusion_criteria())\n  #  p_this = get_new_ggplot(p_df)\n    p_one2 = ggplot() + ggtitle(\"Singletons\") + xlim(0,1) \n    sing = p_df[p_df$count_cases == 1 & p_df$count_controls == 0,]\n    p_one2 = p_one2 + geom_histogram(data=sing,aes(x=hetAB_cases),binwidth=0.01) +  xlab(\"Average read heterozygosity\")  + ylab(\"Number of sites\")\n    p_second2 = ggplot() + ggtitle(\"Doubletons\")   + xlim(0,1) \n    double = p_df[p_df$count_cases == 2 & p_df$count_controls == 0,]\n    p_second2= p_second2 + geom_histogram(data=double,aes(hetAB_cases),binwidth=0.01) + xlab(\"Average read heterozygosity\")  + ylab(\"Number of sites\")\n    grid.arrange(p_one2,p_second2,ncol=2,main=\"Cases Heterozygosity\")\n    #plot(p_one)\n    #  plot(c(0,7), c(0,7), col=\"red\", lwd=3, type=\"l\", xlab=\"Expected (-logP)\", ylab=\"Observed (-logP)\", xlim=c(0,7), ylim=c(0,7), las=1, xaxs=\"i\", yaxs=\"i\", bty=\"l\")\n  })\n  output$overall_allelic_balance = renderPlot({\n    p_df = get_data_set(inclusion_criteria())\n    p_overall= ggplot() + ggtitle(\"Overall\") + xlim(0,1)\n    sing = p_df[(p_df$count_cases + p_df$count_controls) <3, ]\n    p_overall = p_overall + geom_histogram(data=sing,aes(x=HET),binwidth=0.01) +  xlab(\"Average read heterozygosity (Singletons and Doubletons)\")  + ylab(\"Number of sites\")\n    p_overall\n  })\n  output$downloadSites = downloadHandler(\n    filename = function() {\n      paste0(\"sites-\",Sys.Date(), '.txt')\n    },\n    content = function(con){\n      p_df  = get_data_set(inclusion_criteria())\n      #print(p_df)\n      write.table(p_df$variant,quote= F , col.names=F , row.names = F,file=con)\n    }\n  )\n  output$qqplot = renderPlot({\n    p_df = get_data_set(inclusion_criteria())\n    p_this = get_new_ggplot(p_df)\n    p_this = p_this + ggtitle(\"QQPlot\")\n    observed = sort(p_df$pvalue)\n    lobs = -(log10(observed))\n    expected = c(1:length(observed))\n    #print(expected)\n    lexp = -(log10(expected / (length(expected)+1)))\n    #  plot(c(0,7), c(0,7), col=\"red\", lwd=3, type=\"l\", xlab=\"Expected (-logP)\", ylab=\"Observed (-logP)\", xlim=c(0,7), ylim=c(0,7), las=1, xaxs=\"i\", yaxs=\"i\", bty=\"l\")\n    qq_gg = data.frame(obs=lobs,expect=lexp)\n    p_this = p_this + geom_abline(intercept=0,slope=1,aes(colour='red')) \n    p_this = p_this + geom_point(data=qq_gg,aes(y=obs,x=expect)) + labs(list(x=\"Expected (-logP)\",y=\"Observed (-logP)\"))\n    p_this = p_this + scale_x_continuous(limits=c(0,5)) + scale_y_continuous(limits=c(0,10))\n    plot(p_this)  \n    #  print(lexp)\n    # plot(lexp, lobs)  \n    #  plot(c(0,7), c(0,7), col=\"red\", lwd=3, type=\"l\", xlab=\"Expected (-logP)\", ylab=\"Observed (-logP)\", xlim=c(0,7), ylim=c(0,7), las=1, xaxs=\"i\", yaxs=\"i\", bty=\"l\")\n    #   points(lexp, lobs, pch=23, cex=.4, bg=\"black\") \n  })\n  \n  output$linear_model = renderTable({\n    p_df = get_data_set(inclusion_criteria())\n    ps = -(log10(p_df$pvalue))\n    #cover_diff = abs(p_df$coverage_mean_cases - p_df$coverage_mean_controls)\n    model = lm(ps ~ p_df$genotype_quality_mean_cases+p_df$genotype_qualtiy_mean_controls+\n                 p_df$proportion_hetAB_20_80_cases+p_df$proportion_hetAB_20_80_controls+\n                 p_df$GQ50_num+p_df$GQ10_num+p_df$hwe+ p_df$MAF_cases)\n    return(summary(model))  \n  })\n  \n  #### THIS IS THE STUFF FOR THE OTHER FULL FILE FILTER\n  \n  output$hwe_plot = renderPlot({\n    p_df = get_data_set(inclusion_criteria())\n    p_df = hwe_thresholds(p_df) \n    #  print(p_df$hwe_threshold)\n    p_this = get_new_ggplot(p_df)\n    p_this = p_this + ggtitle(\"ALL SITES\")\n    p_this = p_this + geom_point(aes(y=HET, x=MAF,colour=hwe_threshold))\n    p_this = p_this + labs(x=\"Minor Allele Frequency\",y=\"Heterozygosity\") \n    #+ \n    #  scale_x_continuous(limits=c(0,0.5)) + scale_y_continuous(limit=c(0,1))\n    plot(p_this)  \n  })\n  #\n  \n  \n})\n",
    "created" : 1422483670232.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "16|42|19|0|\n",
    "hash" : "858535962",
    "id" : "708DB9E8",
    "lastKnownWriteTime" : 1429844833,
    "path" : "~/resequencing/siteqc/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}